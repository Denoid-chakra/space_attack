window.addEventListener('load',function(){
    const canvas = document.getElementById('myCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = 800;
    canvas.height = 500;

    class InputHandler{

        constructor(game){
            this.game = game;
            window.addEventListener('keydown',(e)=>{
                if (( (e.key === 'ArrowUp' ) ||
                (e.key === 'ArrowDown')
                ) && this.game.keys.indexOf(e.key) === -1){
                    this.game.keys.push(e.key);
                      
                }else if (e.key === ' ' ) {
                    this.game.player.shootTop()
                }

            })

            window.addEventListener('keyup',(e)=>{
                if (this.game.keys.indexOf(e.key) > -1){
                    this.game.keys.splice(this.game.keys.indexOf(e.key),1)
                }
                
            })
            }


    }

    class Projectile{
        constructor(game, x, y){
            this.game = game;
            this.x = x;
            this.y = y;
            this.width = 10;
            this.height = 3;
            this.speed = 3;
            this.markedForDeletion = false;
        }
        update(){
             this.x += this.speed
             if (this.x > this.game.width * 0.8) this.markedForDeletion = true;
        }

        draw(context){
           
            context.fillStyle = "white";
            context.fillRect(this.x+50, this.y+10, this.width, this.height);
            
        }

    }

    class Particle {

    }

    class Player {
        constructor(game){
            this.game = game;
            this.width = 120;
            this.height = 190;
            this.x = 20;
            this.y = 100;
            this.speedY = 1;
            this.maxSpeed = 5; 
            this.projectiles = [];


        }
        update(){
            if (this.game.keys.includes('ArrowUp')) {this.speedY = -this.maxSpeed} 
            else if (this.game.keys.includes('ArrowDown')){this.speedY = this.maxSpeed}
            else{ this.speedY = 0;}
            this.y += this.speedY;

            //handle Projectile
            this.projectiles.forEach(projectile =>{
                projectile.update()
            })
            this.projectiles = this.projectiles.filter(projectile =>!projectile.markedForDeletion )

        }

        draw(context){
            context.fillStyle = "black";
            context.fillRect(this.x,this.y,this.width,this.height);
           
            this.projectiles.forEach(projectile =>{
                projectile.draw(context)
            })

        }
        shootTop(){
            if (this.game.ammo >0){
            this.projectiles.push(new Projectile(this.game, this.x, this.y));
            this.game.ammo--
            
            
            }
        }

    }


    class Enemy{
        constructor(game){
            this.game = game;
            this.x = this.game.width;
            this.speedX = Math.random() *- 1.5 - 0.5;
            this.markedForDeletion = false;
            this.lives = 5;
            this.score = this.lives;
        }
        update(){
            this.x += this.speedX;
            if (this.x + this.width <0){
                this.markedForDeletion = true;
            }
        }
        draw(context){
            context.fillStyle ='red';
            context.fillRect(this.x,this.y,this.width,this.height )
            context.fillStyle = 'white';
            context.fillText(this.lives,this.x,this.y);
        }

    }

    class Angler1 extends Enemy{
        constructor(game){
            super(game);
            this.width = 228 *0.2;
            this.height = 169 *0.2;
            this.y = Math.random() * (this.game.height * 0.9 - this.height);
        }
    }

    class Layer{


    }
    

    class Background {

    }

    class Ui {
        constructor (game){
            this.game = game;
            this.fontSize = 35;
            // this.fontFamily = 'Helvetica';
            this.color = 'yellow';
        }
        draw(context){
            context.save()
            context.fillStyle ='white';
            context.shadowOffsetX = 2;
            context.shadowOffsetY = 2;
            context.shadowColor ='black';
            // score 
            context.font = '25px Griffy';
            context.fillText("score :"+this.game.score,20,40)

            // show ammo 
            
            for (let i=0 ; i< this.game.ammo; i++){
                context.fillRect(20+5 *i, 50 ,3, 20 )
            }
            // timmmer
            const formatedTime = (this.game.gameTime*0.001).toFixed(1); 
            context.fillText("Timmer:  "+ formatedTime,this.game.width-200,20)

            // game over msg 
            if(this.game.gameOver){
                context.textAlign = 'center';
                let msg1, msg2;
                if(this.game.score > this.game.winningScore){
                    msg1 = "You Win!";
                    msg2 ="Well Done";

                }
                else{
                    msg1 = "you Loose";
                    msg2 = "Please try Again";

                }
                context.font = '50px Griffy';
                context.fillText(msg1,this.game.width*0.5, this.game.height*0.5);
                context.font = '25px Griffy';
                context.fillText(msg2,this.game.width*0.5, this.game.height*0.6);

            }
            context.restore();

        }
    }


    class Game{
        
        constructor(width, height){
            this.width = width;
            this.height = height;
            this.player = new Player(this); 
            this.input = new InputHandler(this);
            this.keys = [];
            this.ammo = 50;
            this.maxAmmo = 50;
            this.ammoTimmer = 0;
            this.ammoInterval = 900;
            this.enemies = []
            this.enemyTimer = 0;
            this.enemyInterval = 1000;
            this.gameOver = false;
            this.score = 0;
            this.winningScore = 10;
            this.gameTime = 0;
            this.gameTimelimit =10000;

            this.ui= new Ui(this);


        }
        update(deltaTime){
            
            if (!this.gameOver) this.gameTime += deltaTime
            if (this.gameTime > this.gameTimelimit){
                this.gameOver =true;
            }
            this.player.update();
            if (this.ammoTimmer > this.ammoInterval){
                if (this.ammo < this.maxAmmo){
                    this.ammo++ ;
                    this.ammoTimmer =0;
                }
            }
            else{
                this.ammoTimmer += deltaTime;
            }
            this.enemies.forEach(enemy =>{
                enemy.update();
                if (this.checkCollison(this.player,enemy)){
                    enemy.markedForDeletion = true;
                }
                this.player.projectiles.forEach(projectile=>{
                    if(this.checkCollison(projectile,enemy)){
                        enemy.lives --;
                        projectile.markedForDeletion =true;
                        if (!this.gameOver){this.score += enemy.score};
                        
                        if (enemy.lives <=0){
                            enemy.markedForDeletion =true;
                            if (this.score > this.winningScore){
                                this.gameOver = true;
                            }
                        }
                    }
                    
                    
                })

            })
            this.enemies = this.enemies.filter(enemy => !enemy.markedForDeletion);
            
            if (this.enemyTimer > this.enemyInterval && !this.gameOver){
                this.addEnemy();
                this.enemyTimer = 0;
                

            }
            else{
                this.enemyTimer += deltaTime;
            }
        }

        draw(context){
            
            this.player.draw(context);
            this.ui.draw(context);
            this.enemies.forEach(enemy =>{
                enemy.draw(context);
            })
        }
        addEnemy(){
            this.enemies.push(new Angler1(this));
        }

        checkCollison(rect1, rect2){
            return (
                rect1.x < rect2.x + rect2.width &&
                rect1.x + rect1.width > rect2.x &&
                rect1.y < rect2.x + rect2.height &&
                rect1.height + rect1.y > rect2.y )
            
        }
    }



    const game = new Game(canvas.width,canvas.height);
   
    let lastTime =0;
    function animate(timeStamp){
        // delta time is nothing but time gap btw next frame in terms of milliseconds
        const deltaTime = timeStamp - lastTime;
        lastTime = timeStamp;
        ctx.clearRect(0,0,canvas.width,canvas.height);
        game.update(deltaTime);
        game.draw(ctx);
        requestAnimationFrame(animate);
    }

    animate(0)

})